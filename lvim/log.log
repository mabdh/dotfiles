  ...unarvim/site/pack/packer/start/go.nvim/lua/go/gotest.lua:71 |1: {}
 |2: {}

  ...lunarvim/site/pack/packer/start/go.nvim/lua/go/gopls.lua:275 |1: nil
  ...e/lunarvim/site/pack/packer/start/go.nvim/lua/go/lsp.lua:163 |1: {
  capabilities = {
    textDocument = {
      completion = {
        completionItem = {
          commitCharactersSupport = true,
          deprecatedSupport = true,
          documentationFormat = { "markdown", "plaintext" },
          insertReplaceSupport = true,
          labelDetailsSupport = true,
          preselectSupport = true,
          resolveSupport = {
            properties = { "documentation", "details", "additionalTextEdits" }
          },
          snippetSupport = true
        },
        contextSupport = true,
        dynamicRegistration = true
      }
    }
  },
  cmd = { "gopls", "-remote=auto" },
  filetypes = { "go", "gomod", "gosum", "gotmpl", "gohtmltmpl", "gotexttmpl" },
  flags = {
    allow_incremental_sync = true,
    debounce_text_changes = 500
  },
  message_level = 1,
  on_attach = <function 1>,
  root_dir = <function 2>,
  settings = {
    gopls = {
      analyses = {
        ST1003 = true,
        fieldalignment = false,
        fillreturns = true,
        nilness = true,
        nonewvars = true,
        shadow = true,
        undeclaredname = true,
        unreachable = true,
        unusedparams = true,
        unusedwrite = true,
        useany = true
      },
      buildFlags = {},
      codelenses = {
        gc_details = true,
        generate = true,
        regenerate_cgo = true,
        test = true,
        tidy = true,
        upgrade_dependency = true,
        vendor = true
      },
      completeUnimported = true,
      diagnosticsDelay = "500ms",
      gofumpt = false,
      hints = {
        assignVariableTypes = true,
        compositeLiteralFields = true,
        compositeLiteralTypes = true,
        constantValues = true,
        functionTypeParameters = true,
        parameterNames = true,
        rangeVariableTypes = true
      },
      ["local"] = "github.com/odpf/siren",
      matcher = "Fuzzy",
      staticcheck = true,
      symbolMatcher = "fuzzy",
      usePlaceholders = true
    }
  }
}

  ...arvim/site/pack/packer/start/go.nvim/lua/go/codelens.lua:7 |1: enable codelens
  ...lunarvim/site/pack/packer/start/go.nvim/lua/go/gopls.lua:153 |1: golang.org/x/tools/gopls v0.10.1     golang.org/x/tools/gopls@v0.10.1 h1:JoHe17pdZ8Vsa24/GUO8iTVTKPh0EOBiWpPop7XJybI= 
  ...lunarvim/site/pack/packer/start/go.nvim/lua/go/gopls.lua:167 |1: 0.10.1
  ...lunarvim/site/pack/packer/start/go.nvim/lua/go/gopls.lua:153 |1: 
  ...lunarvim/site/pack/packer/start/go.nvim/lua/go/gopls.lua:157
  ...e/lunarvim/site/pack/packer/start/go.nvim/lua/go/lsp.lua:24 |1: {
  _on_attach = <function 1>,
  attached_buffers = {
    [24] = true,
    [27] = true
  },
  cancel_request = <function 2>,
  commands = {},
  config = {
    _on_attach = <function 3>,
    autostart = true,
    capabilities = {
      callHierarchy = {
        dynamicRegistration = false
      },
      textDocument = {
        codeAction = {
          codeActionLiteralSupport = {
            codeActionKind = {
              valueSet = { "", "Empty", "QuickFix", "Refactor", "RefactorExtract", "RefactorInline", "RefactorRewrite", "Source", "SourceOrganizeImports", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
            }
          },
          dataSupport = true,
          dynamicRegistration = false,
          isPreferredSupport = true,
          resolveSupport = {
            properties = { "edit" }
          }
        },
        completion = {
          completionItem = {
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { "markdown", "plaintext" },
            insertReplaceSupport = true,
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = {
              properties = { "documentation", "details", "additionalTextEdits" }
            },
            snippetSupport = true
          },
          completionItemKind = {
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
          },
          contextSupport = true,
          dynamicRegistration = true
        },
        declaration = {
          linkSupport = true
        },
        definition = {
          linkSupport = true
        },
        documentHighlight = {
          dynamicRegistration = false
        },
        documentSymbol = {
          dynamicRegistration = false,
          hierarchicalDocumentSymbolSupport = true,
          symbolKind = {
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
          }
        },
        hover = {
          contentFormat = { "markdown", "plaintext" },
          dynamicRegistration = false
        },
        implementation = {
          linkSupport = true
        },
        publishDiagnostics = {
          relatedInformation = true,
          tagSupport = {
            valueSet = { 1, 2 }
          }
        },
        references = {
          dynamicRegistration = false
        },
        rename = {
          dynamicRegistration = false,
          prepareSupport = true
        },
        signatureHelp = {
          dynamicRegistration = false,
          signatureInformation = {
            activeParameterSupport = true,
            documentationFormat = { "markdown", "plaintext" },
            parameterInformation = {
              labelOffsetSupport = true
            }
          }
        },
        synchronization = {
          didSave = true,
          dynamicRegistration = false,
          willSave = false,
          willSaveWaitUntil = false
        },
        typeDefinition = {
          linkSupport = true
        }
      },
      window = {
        showDocument = {
          support = false
        },
        showMessage = {
          messageActionItem = {
            additionalPropertiesSupport = false
          }
        },
        workDoneProgress = true
      },
      workspace = {
        applyEdit = true,
        configuration = true,
        symbol = {
          dynamicRegistration = false,
          hierarchicalWorkspaceSymbolSupport = true,
          symbolKind = {
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
          }
        },
        workspaceEdit = {
          resourceOperations = { "rename", "create", "delete" }
        },
        workspaceFolders = true
      }
    },
    cmd = { "gopls", "-remote=auto" },
    cmd_cwd = "/Users/muhammad.abduh/repo/odpf/siren",
    filetypes = { "go", "gomod", "gosum", "gotmpl", "gohtmltmpl", "gotexttmpl" },
    flags = {
      allow_incremental_sync = true,
      debounce_text_changes = 500
    },
    get_language_id = <function 4>,
    handlers = <1>{},
    init_options = vim.empty_dict(),
    log_level = 2,
    message_level = 1,
    name = "gopls",
    on_attach = <function 5>,
    on_exit = <function 6>,
    on_init = <function 7>,
    root_dir = "/Users/muhammad.abduh/repo/odpf/siren",
    settings = {
      gopls = {
        analyses = {
          ST1003 = true,
          fieldalignment = false,
          fillreturns = true,
          nilness = true,
          nonewvars = true,
          shadow = true,
          undeclaredname = true,
          unreachable = true,
          unusedparams = true,
          unusedwrite = true,
          useany = true
        },
        buildFlags = {},
        codelenses = {
          gc_details = true,
          generate = true,
          regenerate_cgo = true,
          test = true,
          tidy = true,
          upgrade_dependency = true,
          vendor = true
        },
        completeUnimported = true,
        diagnosticsDelay = "500ms",
        gofumpt = false,
        hints = {
          assignVariableTypes = true,
          compositeLiteralFields = true,
          compositeLiteralTypes = true,
          constantValues = true,
          functionTypeParameters = true,
          parameterNames = true,
          rangeVariableTypes = true
        },
        ["local"] = "github.com/odpf/siren",
        matcher = "Fuzzy",
        staticcheck = true,
        symbolMatcher = "fuzzy",
        usePlaceholders = true
      }
    },
    single_file_support = true,
    workspace_folders = <2>{ {
        name = "/Users/muhammad.abduh/repo/odpf/siren",
        uri = "file:///Users/muhammad.abduh/repo/odpf/siren"
      } },
    <metatable> = <3>{
      __tostring = <function 8>
    }
  },
  handlers = <table 1>,
  id = 1,
  initialized = true,
  is_stopped = <function 9>,
  messages = {
    messages = {},
    name = "gopls",
    progress = {
      ["5577006791947779410"] = {
        message = "Loading packages...",
        title = "Setting up workspace"
      }
    },
    status = {}
  },
  name = "gopls",
  notify = <function 10>,
  offset_encoding = "utf-16",
  request = <function 11>,
  request_sync = <function 12>,
  requests = {
    [2] = {
      bufnr = 27,
      method = "textDocument/documentHighlight",
      type = "pending"
    },
    [3] = {
      bufnr = 24,
      method = "textDocument/documentHighlight",
      type = "pending"
    }
  },
  rpc = {
    is_closing = <function 13>,
    notify = <function 14>,
    request = <function 15>,
    terminate = <function 16>
  },
  server_capabilities = {
    callHierarchyProvider = true,
    codeActionProvider = {
      codeActionKinds = { "quickfix", "refactor.extract", "refactor.rewrite", "source.fixAll", "source.organizeImports" }
    },
    codeLensProvider = vim.empty_dict(),
    completionProvider = {
      triggerCharacters = { "." }
    },
    definitionProvider = true,
    documentFormattingProvider = true,
    documentHighlightProvider = true,
    documentLinkProvider = vim.empty_dict(),
    documentSymbolProvider = true,
    executeCommandProvider = {
      commands = { "gopls.add_dependency", "gopls.add_import", "gopls.apply_fix", "gopls.check_upgrades", "gopls.edit_go_directive", "gopls.gc_details", "gopls.generate", "gopls.generate_gopls_mod", "gopls.go_get_package", "gopls.list_imports", "gopls.list_known_packages", "gopls.regenerate_cgo", "gopls.remove_dependency", "gopls.reset_go_mod_diagnostics", "gopls.run_tests", "gopls.run_vulncheck_exp", "gopls.start_debugging", "gopls.test", "gopls.tidy", "gopls.toggle_gc_details", "gopls.update_go_sum", "gopls.upgrade_dependency", "gopls.vendor" }
    },
    foldingRangeProvider = true,
    hoverProvider = true,
    implementationProvider = true,
    inlayHintProvider = vim.empty_dict(),
    referencesProvider = true,
    renameProvider = {
      prepareProvider = true
    },
    signatureHelpProvider = {
      triggerCharacters = { "(", "," }
    },
    textDocumentSync = {
      change = 2,
      openClose = true,
      save = vim.empty_dict()
    },
    typeDefinitionProvider = true,
    workspace = {
      fileOperations = vim.empty_dict(),
      workspaceFolders = {
        changeNotifications = "workspace/didChangeWorkspaceFolders",
        supported = true
      }
    },
    workspaceSymbolProvider = true
  },
  stop = <function 17>,
  supports_method = <function 18>,
  workspaceFolders = <table 2>,
  workspace_did_change_configuration = <function 19>,
  workspace_folders = <table 2>,
  <metatable> = {
    __index = <function 20>
  }
}
 |2: 24
  ...e/lunarvim/site/pack/packer/start/go.nvim/lua/go/lsp.lua:24 |1: {
  _on_attach = <function 1>,
  attached_buffers = {
    [24] = true,
    [27] = true
  },
  cancel_request = <function 2>,
  commands = {},
  config = {
    _on_attach = <function 3>,
    autostart = true,
    capabilities = {
      callHierarchy = {
        dynamicRegistration = false
      },
      textDocument = {
        codeAction = {
          codeActionLiteralSupport = {
            codeActionKind = {
              valueSet = { "", "Empty", "QuickFix", "Refactor", "RefactorExtract", "RefactorInline", "RefactorRewrite", "Source", "SourceOrganizeImports", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
            }
          },
          dataSupport = true,
          dynamicRegistration = false,
          isPreferredSupport = true,
          resolveSupport = {
            properties = { "edit" }
          }
        },
        completion = {
          completionItem = {
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { "markdown", "plaintext" },
            insertReplaceSupport = true,
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = {
              properties = { "documentation", "details", "additionalTextEdits" }
            },
            snippetSupport = true
          },
          completionItemKind = {
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
          },
          contextSupport = true,
          dynamicRegistration = true
        },
        declaration = {
          linkSupport = true
        },
        definition = {
          linkSupport = true
        },
        documentHighlight = {
          dynamicRegistration = false
        },
        documentSymbol = {
          dynamicRegistration = false,
          hierarchicalDocumentSymbolSupport = true,
          symbolKind = {
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
          }
        },
        hover = {
          contentFormat = { "markdown", "plaintext" },
          dynamicRegistration = false
        },
        implementation = {
          linkSupport = true
        },
        publishDiagnostics = {
          relatedInformation = true,
          tagSupport = {
            valueSet = { 1, 2 }
          }
        },
        references = {
          dynamicRegistration = false
        },
        rename = {
          dynamicRegistration = false,
          prepareSupport = true
        },
        signatureHelp = {
          dynamicRegistration = false,
          signatureInformation = {
            activeParameterSupport = true,
            documentationFormat = { "markdown", "plaintext" },
            parameterInformation = {
              labelOffsetSupport = true
            }
          }
        },
        synchronization = {
          didSave = true,
          dynamicRegistration = false,
          willSave = false,
          willSaveWaitUntil = false
        },
        typeDefinition = {
          linkSupport = true
        }
      },
      window = {
        showDocument = {
          support = false
        },
        showMessage = {
          messageActionItem = {
            additionalPropertiesSupport = false
          }
        },
        workDoneProgress = true
      },
      workspace = {
        applyEdit = true,
        configuration = true,
        symbol = {
          dynamicRegistration = false,
          hierarchicalWorkspaceSymbolSupport = true,
          symbolKind = {
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
          }
        },
        workspaceEdit = {
          resourceOperations = { "rename", "create", "delete" }
        },
        workspaceFolders = true
      }
    },
    cmd = { "gopls", "-remote=auto" },
    cmd_cwd = "/Users/muhammad.abduh/repo/odpf/siren",
    filetypes = { "go", "gomod", "gosum", "gotmpl", "gohtmltmpl", "gotexttmpl" },
    flags = {
      allow_incremental_sync = true,
      debounce_text_changes = 500
    },
    get_language_id = <function 4>,
    handlers = <1>{},
    init_options = vim.empty_dict(),
    log_level = 2,
    message_level = 1,
    name = "gopls",
    on_attach = <function 5>,
    on_exit = <function 6>,
    on_init = <function 7>,
    root_dir = "/Users/muhammad.abduh/repo/odpf/siren",
    settings = {
      gopls = {
        analyses = {
          ST1003 = true,
          fieldalignment = false,
          fillreturns = true,
          nilness = true,
          nonewvars = true,
          shadow = true,
          undeclaredname = true,
          unreachable = true,
          unusedparams = true,
          unusedwrite = true,
          useany = true
        },
        buildFlags = {},
        codelenses = {
          gc_details = true,
          generate = true,
          regenerate_cgo = true,
          test = true,
          tidy = true,
          upgrade_dependency = true,
          vendor = true
        },
        completeUnimported = true,
        diagnosticsDelay = "500ms",
        gofumpt = false,
        hints = {
          assignVariableTypes = true,
          compositeLiteralFields = true,
          compositeLiteralTypes = true,
          constantValues = true,
          functionTypeParameters = true,
          parameterNames = true,
          rangeVariableTypes = true
        },
        ["local"] = "github.com/odpf/siren",
        matcher = "Fuzzy",
        staticcheck = true,
        symbolMatcher = "fuzzy",
        usePlaceholders = true
      }
    },
    single_file_support = true,
    workspace_folders = <2>{ {
        name = "/Users/muhammad.abduh/repo/odpf/siren",
        uri = "file:///Users/muhammad.abduh/repo/odpf/siren"
      } },
    <metatable> = <3>{
      __tostring = <function 8>
    }
  },
  handlers = <table 1>,
  id = 1,
  initialized = true,
  is_stopped = <function 9>,
  messages = {
    messages = {},
    name = "gopls",
    progress = {
      ["5577006791947779410"] = {
        done = true,
        message = "Finished loading packages.",
        title = "Setting up workspace"
      }
    },
    status = {}
  },
  name = "gopls",
  notify = <function 10>,
  offset_encoding = "utf-16",
  request = <function 11>,
  request_sync = <function 12>,
  requests = {
    [10] = {
      bufnr = 24,
      method = "textDocument/documentHighlight",
      type = "pending"
    }
  },
  rpc = {
    is_closing = <function 13>,
    notify = <function 14>,
    request = <function 15>,
    terminate = <function 16>
  },
  server_capabilities = {
    callHierarchyProvider = true,
    codeActionProvider = {
      codeActionKinds = { "quickfix", "refactor.extract", "refactor.rewrite", "source.fixAll", "source.organizeImports" }
    },
    codeLensProvider = vim.empty_dict(),
    completionProvider = {
      triggerCharacters = { "." }
    },
    definitionProvider = true,
    documentFormattingProvider = true,
    documentHighlightProvider = true,
    documentLinkProvider = vim.empty_dict(),
    documentSymbolProvider = true,
    executeCommandProvider = {
      commands = { "gopls.add_dependency", "gopls.add_import", "gopls.apply_fix", "gopls.check_upgrades", "gopls.edit_go_directive", "gopls.gc_details", "gopls.generate", "gopls.generate_gopls_mod", "gopls.go_get_package", "gopls.list_imports", "gopls.list_known_packages", "gopls.regenerate_cgo", "gopls.remove_dependency", "gopls.reset_go_mod_diagnostics", "gopls.run_tests", "gopls.run_vulncheck_exp", "gopls.start_debugging", "gopls.test", "gopls.tidy", "gopls.toggle_gc_details", "gopls.update_go_sum", "gopls.upgrade_dependency", "gopls.vendor" }
    },
    foldingRangeProvider = true,
    hoverProvider = true,
    implementationProvider = true,
    inlayHintProvider = vim.empty_dict(),
    referencesProvider = true,
    renameProvider = {
      prepareProvider = true
    },
    signatureHelpProvider = {
      triggerCharacters = { "(", "," }
    },
    textDocumentSync = {
      change = 2,
      openClose = true,
      save = vim.empty_dict()
    },
    typeDefinitionProvider = true,
    workspace = {
      fileOperations = vim.empty_dict(),
      workspaceFolders = {
        changeNotifications = "workspace/didChangeWorkspaceFolders",
        supported = true
      }
    },
    workspaceSymbolProvider = true
  },
  stop = <function 17>,
  supports_method = <function 18>,
  workspaceFolders = <table 2>,
  workspace_did_change_configuration = <function 19>,
  workspace_folders = <table 2>,
  <metatable> = {
    __index = <function 20>
  }
}
 |2: 27
  ...e/lunarvim/site/pack/packer/start/go.nvim/lua/go/lsp.lua:24 |1: {
  _on_attach = <function 1>,
  attached_buffers = {
    [20] = true
  },
  cancel_request = <function 2>,
  commands = {},
  config = {
    _on_attach = <function 3>,
    autostart = true,
    capabilities = {
      callHierarchy = {
        dynamicRegistration = false
      },
      textDocument = {
        codeAction = {
          codeActionLiteralSupport = {
            codeActionKind = {
              valueSet = { "", "Empty", "QuickFix", "Refactor", "RefactorExtract", "RefactorInline", "RefactorRewrite", "Source", "SourceOrganizeImports", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
            }
          },
          dataSupport = true,
          dynamicRegistration = false,
          isPreferredSupport = true,
          resolveSupport = {
            properties = { "edit" }
          }
        },
        completion = {
          completionItem = {
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { "markdown", "plaintext" },
            insertReplaceSupport = true,
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = {
              properties = { "documentation", "details", "additionalTextEdits" }
            },
            snippetSupport = true
          },
          completionItemKind = {
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
          },
          contextSupport = true,
          dynamicRegistration = true
        },
        declaration = {
          linkSupport = true
        },
        definition = {
          linkSupport = true
        },
        documentHighlight = {
          dynamicRegistration = false
        },
        documentSymbol = {
          dynamicRegistration = false,
          hierarchicalDocumentSymbolSupport = true,
          symbolKind = {
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
          }
        },
        hover = {
          contentFormat = { "markdown", "plaintext" },
          dynamicRegistration = false
        },
        implementation = {
          linkSupport = true
        },
        publishDiagnostics = {
          relatedInformation = true,
          tagSupport = {
            valueSet = { 1, 2 }
          }
        },
        references = {
          dynamicRegistration = false
        },
        rename = {
          dynamicRegistration = false,
          prepareSupport = true
        },
        signatureHelp = {
          dynamicRegistration = false,
          signatureInformation = {
            activeParameterSupport = true,
            documentationFormat = { "markdown", "plaintext" },
            parameterInformation = {
              labelOffsetSupport = true
            }
          }
        },
        synchronization = {
          didSave = true,
          dynamicRegistration = false,
          willSave = false,
          willSaveWaitUntil = false
        },
        typeDefinition = {
          linkSupport = true
        }
      },
      window = {
        showDocument = {
          support = false
        },
        showMessage = {
          messageActionItem = {
            additionalPropertiesSupport = false
          }
        },
        workDoneProgress = true
      },
      workspace = {
        applyEdit = true,
        configuration = true,
        symbol = {
          dynamicRegistration = false,
          hierarchicalWorkspaceSymbolSupport = true,
          symbolKind = {
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
          }
        },
        workspaceEdit = {
          resourceOperations = { "rename", "create", "delete" }
        },
        workspaceFolders = true
      }
    },
    cmd = { "gopls", "-remote=auto" },
    cmd_cwd = "/Users/muhammad.abduh/repo/odpf/siren",
    filetypes = { "go", "gomod", "gosum", "gotmpl", "gohtmltmpl", "gotexttmpl" },
    flags = {
      allow_incremental_sync = true,
      debounce_text_changes = 500
    },
    get_language_id = <function 4>,
    handlers = <1>{},
    init_options = vim.empty_dict(),
    log_level = 2,
    message_level = 1,
    name = "gopls",
    on_attach = <function 5>,
    on_exit = <function 6>,
    on_init = <function 7>,
    root_dir = "/Users/muhammad.abduh/repo/odpf/siren",
    settings = {
      gopls = {
        analyses = {
          ST1003 = true,
          fieldalignment = false,
          fillreturns = true,
          nilness = true,
          nonewvars = true,
          shadow = true,
          undeclaredname = true,
          unreachable = true,
          unusedparams = true,
          unusedwrite = true,
          useany = true
        },
        buildFlags = {},
        codelenses = {
          gc_details = true,
          generate = true,
          regenerate_cgo = true,
          test = true,
          tidy = true,
          upgrade_dependency = true,
          vendor = true
        },
        completeUnimported = true,
        diagnosticsDelay = "500ms",
        gofumpt = false,
        hints = {
          assignVariableTypes = true,
          compositeLiteralFields = true,
          compositeLiteralTypes = true,
          constantValues = true,
          functionTypeParameters = true,
          parameterNames = true,
          rangeVariableTypes = true
        },
        ["local"] = "github.com/odpf/siren",
        matcher = "Fuzzy",
        staticcheck = true,
        symbolMatcher = "fuzzy",
        usePlaceholders = true
      }
    },
    single_file_support = true,
    workspace_folders = <2>{ {
        name = "/Users/muhammad.abduh/repo/odpf/siren",
        uri = "file:///Users/muhammad.abduh/repo/odpf/siren"
      } },
    <metatable> = <3>{
      __tostring = <function 8>
    }
  },
  handlers = <table 1>,
  id = 1,
  initialized = true,
  is_stopped = <function 9>,
  messages = {
    messages = {},
    name = "gopls",
    progress = {
      ["5577006791947779410"] = {
        done = true,
        message = "Finished loading packages.",
        title = "Setting up workspace"
      }
    },
    status = {}
  },
  name = "gopls",
  notify = <function 10>,
  offset_encoding = "utf-16",
  request = <function 11>,
  request_sync = <function 12>,
  requests = {
    [12] = {
      bufnr = 20,
      method = "textDocument/documentHighlight",
      type = "pending"
    }
  },
  rpc = {
    is_closing = <function 13>,
    notify = <function 14>,
    request = <function 15>,
    terminate = <function 16>
  },
  server_capabilities = {
    callHierarchyProvider = true,
    codeActionProvider = {
      codeActionKinds = { "quickfix", "refactor.extract", "refactor.rewrite", "source.fixAll", "source.organizeImports" }
    },
    codeLensProvider = vim.empty_dict(),
    completionProvider = {
      triggerCharacters = { "." }
    },
    definitionProvider = true,
    documentFormattingProvider = true,
    documentHighlightProvider = true,
    documentLinkProvider = vim.empty_dict(),
    documentSymbolProvider = true,
    executeCommandProvider = {
      commands = { "gopls.add_dependency", "gopls.add_import", "gopls.apply_fix", "gopls.check_upgrades", "gopls.edit_go_directive", "gopls.gc_details", "gopls.generate", "gopls.generate_gopls_mod", "gopls.go_get_package", "gopls.list_imports", "gopls.list_known_packages", "gopls.regenerate_cgo", "gopls.remove_dependency", "gopls.reset_go_mod_diagnostics", "gopls.run_tests", "gopls.run_vulncheck_exp", "gopls.start_debugging", "gopls.test", "gopls.tidy", "gopls.toggle_gc_details", "gopls.update_go_sum", "gopls.upgrade_dependency", "gopls.vendor" }
    },
    foldingRangeProvider = true,
    hoverProvider = true,
    implementationProvider = true,
    inlayHintProvider = vim.empty_dict(),
    referencesProvider = true,
    renameProvider = {
      prepareProvider = true
    },
    signatureHelpProvider = {
      triggerCharacters = { "(", "," }
    },
    textDocumentSync = {
      change = 2,
      openClose = true,
      save = vim.empty_dict()
    },
    typeDefinitionProvider = true,
    workspace = {
      fileOperations = vim.empty_dict(),
      workspaceFolders = {
        changeNotifications = "workspace/didChangeWorkspaceFolders",
        supported = true
      }
    },
    workspaceSymbolProvider = true
  },
  stop = <function 17>,
  supports_method = <function 18>,
  workspaceFolders = <table 2>,
  workspace_did_change_configuration = <function 19>,
  workspace_folders = <table 2>,
  <metatable> = {
    __index = <function 20>
  }
}
 |2: 20
  ...e/lunarvim/site/pack/packer/start/go.nvim/lua/go/lsp.lua:24 |1: {
  _on_attach = <function 1>,
  attached_buffers = {
    [20] = true,
    [34] = true
  },
  cancel_request = <function 2>,
  commands = {},
  config = {
    _on_attach = <function 3>,
    autostart = true,
    capabilities = {
      callHierarchy = {
        dynamicRegistration = false
      },
      textDocument = {
        codeAction = {
          codeActionLiteralSupport = {
            codeActionKind = {
              valueSet = { "", "Empty", "QuickFix", "Refactor", "RefactorExtract", "RefactorInline", "RefactorRewrite", "Source", "SourceOrganizeImports", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
            }
          },
          dataSupport = true,
          dynamicRegistration = false,
          isPreferredSupport = true,
          resolveSupport = {
            properties = { "edit" }
          }
        },
        completion = {
          completionItem = {
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { "markdown", "plaintext" },
            insertReplaceSupport = true,
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = {
              properties = { "documentation", "details", "additionalTextEdits" }
            },
            snippetSupport = true
          },
          completionItemKind = {
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
          },
          contextSupport = true,
          dynamicRegistration = true
        },
        declaration = {
          linkSupport = true
        },
        definition = {
          linkSupport = true
        },
        documentHighlight = {
          dynamicRegistration = false
        },
        documentSymbol = {
          dynamicRegistration = false,
          hierarchicalDocumentSymbolSupport = true,
          symbolKind = {
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
          }
        },
        hover = {
          contentFormat = { "markdown", "plaintext" },
          dynamicRegistration = false
        },
        implementation = {
          linkSupport = true
        },
        publishDiagnostics = {
          relatedInformation = true,
          tagSupport = {
            valueSet = { 1, 2 }
          }
        },
        references = {
          dynamicRegistration = false
        },
        rename = {
          dynamicRegistration = false,
          prepareSupport = true
        },
        signatureHelp = {
          dynamicRegistration = false,
          signatureInformation = {
            activeParameterSupport = true,
            documentationFormat = { "markdown", "plaintext" },
            parameterInformation = {
              labelOffsetSupport = true
            }
          }
        },
        synchronization = {
          didSave = true,
          dynamicRegistration = false,
          willSave = false,
          willSaveWaitUntil = false
        },
        typeDefinition = {
          linkSupport = true
        }
      },
      window = {
        showDocument = {
          support = false
        },
        showMessage = {
          messageActionItem = {
            additionalPropertiesSupport = false
          }
        },
        workDoneProgress = true
      },
      workspace = {
        applyEdit = true,
        configuration = true,
        symbol = {
          dynamicRegistration = false,
          hierarchicalWorkspaceSymbolSupport = true,
          symbolKind = {
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
          }
        },
        workspaceEdit = {
          resourceOperations = { "rename", "create", "delete" }
        },
        workspaceFolders = true
      }
    },
    cmd = { "gopls", "-remote=auto" },
    cmd_cwd = "/Users/muhammad.abduh/repo/odpf/siren",
    filetypes = { "go", "gomod", "gosum", "gotmpl", "gohtmltmpl", "gotexttmpl" },
    flags = {
      allow_incremental_sync = true,
      debounce_text_changes = 500
    },
    get_language_id = <function 4>,
    handlers = <1>{},
    init_options = vim.empty_dict(),
    log_level = 2,
    message_level = 1,
    name = "gopls",
    on_attach = <function 5>,
    on_exit = <function 6>,
    on_init = <function 7>,
    root_dir = "/Users/muhammad.abduh/repo/odpf/siren",
    settings = {
      gopls = {
        analyses = {
          ST1003 = true,
          fieldalignment = false,
          fillreturns = true,
          nilness = true,
          nonewvars = true,
          shadow = true,
          undeclaredname = true,
          unreachable = true,
          unusedparams = true,
          unusedwrite = true,
          useany = true
        },
        buildFlags = {},
        codelenses = {
          gc_details = true,
          generate = true,
          regenerate_cgo = true,
          test = true,
          tidy = true,
          upgrade_dependency = true,
          vendor = true
        },
        completeUnimported = true,
        diagnosticsDelay = "500ms",
        gofumpt = false,
        hints = {
          assignVariableTypes = true,
          compositeLiteralFields = true,
          compositeLiteralTypes = true,
          constantValues = true,
          functionTypeParameters = true,
          parameterNames = true,
          rangeVariableTypes = true
        },
        ["local"] = "github.com/odpf/siren",
        matcher = "Fuzzy",
        staticcheck = true,
        symbolMatcher = "fuzzy",
        usePlaceholders = true
      }
    },
    single_file_support = true,
    workspace_folders = <2>{ {
        name = "/Users/muhammad.abduh/repo/odpf/siren",
        uri = "file:///Users/muhammad.abduh/repo/odpf/siren"
      } },
    <metatable> = <3>{
      __tostring = <function 8>
    }
  },
  handlers = <table 1>,
  id = 1,
  initialized = true,
  is_stopped = <function 9>,
  messages = {
    messages = {},
    name = "gopls",
    progress = {
      ["3032113757904489387"] = {
        cancellable = true,
        done = true,
        message = "failed",
        title = "Running go generate ./..."
      },
      ["5577006791947779410"] = {
        done = true,
        message = "Finished loading packages.",
        title = "Setting up workspace"
      }
    },
    status = {}
  },
  name = "gopls",
  notify = <function 10>,
  offset_encoding = "utf-16",
  request = <function 11>,
  request_sync = <function 12>,
  requests = {
    [56] = {
      bufnr = 34,
      method = "textDocument/documentHighlight",
      type = "pending"
    }
  },
  rpc = {
    is_closing = <function 13>,
    notify = <function 14>,
    request = <function 15>,
    terminate = <function 16>
  },
  server_capabilities = {
    callHierarchyProvider = true,
    codeActionProvider = {
      codeActionKinds = { "quickfix", "refactor.extract", "refactor.rewrite", "source.fixAll", "source.organizeImports" }
    },
    codeLensProvider = vim.empty_dict(),
    completionProvider = {
      triggerCharacters = { "." }
    },
    definitionProvider = true,
    documentFormattingProvider = true,
    documentHighlightProvider = true,
    documentLinkProvider = vim.empty_dict(),
    documentSymbolProvider = true,
    executeCommandProvider = {
      commands = { "gopls.add_dependency", "gopls.add_import", "gopls.apply_fix", "gopls.check_upgrades", "gopls.edit_go_directive", "gopls.gc_details", "gopls.generate", "gopls.generate_gopls_mod", "gopls.go_get_package", "gopls.list_imports", "gopls.list_known_packages", "gopls.regenerate_cgo", "gopls.remove_dependency", "gopls.reset_go_mod_diagnostics", "gopls.run_tests", "gopls.run_vulncheck_exp", "gopls.start_debugging", "gopls.test", "gopls.tidy", "gopls.toggle_gc_details", "gopls.update_go_sum", "gopls.upgrade_dependency", "gopls.vendor" }
    },
    foldingRangeProvider = true,
    hoverProvider = true,
    implementationProvider = true,
    inlayHintProvider = vim.empty_dict(),
    referencesProvider = true,
    renameProvider = {
      prepareProvider = true
    },
    signatureHelpProvider = {
      triggerCharacters = { "(", "," }
    },
    textDocumentSync = {
      change = 2,
      openClose = true,
      save = vim.empty_dict()
    },
    typeDefinitionProvider = true,
    workspace = {
      fileOperations = vim.empty_dict(),
      workspaceFolders = {
        changeNotifications = "workspace/didChangeWorkspaceFolders",
        supported = true
      }
    },
    workspaceSymbolProvider = true
  },
  stop = <function 17>,
  supports_method = <function 18>,
  workspaceFolders = <table 2>,
  workspace_did_change_configuration = <function 19>,
  workspace_folders = <table 2>,
  <metatable> = {
    __index = <function 20>
  }
}
 |2: 34
  ...e/lunarvim/site/pack/packer/start/go.nvim/lua/go/lsp.lua:24 |1: {
  _on_attach = <function 1>,
  attached_buffers = {
    [20] = true,
    [34] = true,
    [51] = true
  },
  cancel_request = <function 2>,
  commands = {},
  config = {
    _on_attach = <function 3>,
    autostart = true,
    capabilities = {
      callHierarchy = {
        dynamicRegistration = false
      },
      textDocument = {
        codeAction = {
          codeActionLiteralSupport = {
            codeActionKind = {
              valueSet = { "", "Empty", "QuickFix", "Refactor", "RefactorExtract", "RefactorInline", "RefactorRewrite", "Source", "SourceOrganizeImports", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
            }
          },
          dataSupport = true,
          dynamicRegistration = false,
          isPreferredSupport = true,
          resolveSupport = {
            properties = { "edit" }
          }
        },
        completion = {
          completionItem = {
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { "markdown", "plaintext" },
            insertReplaceSupport = true,
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = {
              properties = { "documentation", "details", "additionalTextEdits" }
            },
            snippetSupport = true
          },
          completionItemKind = {
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
          },
          contextSupport = true,
          dynamicRegistration = true
        },
        declaration = {
          linkSupport = true
        },
        definition = {
          linkSupport = true
        },
        documentHighlight = {
          dynamicRegistration = false
        },
        documentSymbol = {
          dynamicRegistration = false,
          hierarchicalDocumentSymbolSupport = true,
          symbolKind = {
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
          }
        },
        hover = {
          contentFormat = { "markdown", "plaintext" },
          dynamicRegistration = false
        },
        implementation = {
          linkSupport = true
        },
        publishDiagnostics = {
          relatedInformation = true,
          tagSupport = {
            valueSet = { 1, 2 }
          }
        },
        references = {
          dynamicRegistration = false
        },
        rename = {
          dynamicRegistration = false,
          prepareSupport = true
        },
        signatureHelp = {
          dynamicRegistration = false,
          signatureInformation = {
            activeParameterSupport = true,
            documentationFormat = { "markdown", "plaintext" },
            parameterInformation = {
              labelOffsetSupport = true
            }
          }
        },
        synchronization = {
          didSave = true,
          dynamicRegistration = false,
          willSave = false,
          willSaveWaitUntil = false
        },
        typeDefinition = {
          linkSupport = true
        }
      },
      window = {
        showDocument = {
          support = false
        },
        showMessage = {
          messageActionItem = {
            additionalPropertiesSupport = false
          }
        },
        workDoneProgress = true
      },
      workspace = {
        applyEdit = true,
        configuration = true,
        symbol = {
          dynamicRegistration = false,
          hierarchicalWorkspaceSymbolSupport = true,
          symbolKind = {
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
          }
        },
        workspaceEdit = {
          resourceOperations = { "rename", "create", "delete" }
        },
        workspaceFolders = true
      }
    },
    cmd = { "gopls", "-remote=auto" },
    cmd_cwd = "/Users/muhammad.abduh/repo/odpf/siren",
    filetypes = { "go", "gomod", "gosum", "gotmpl", "gohtmltmpl", "gotexttmpl" },
    flags = {
      allow_incremental_sync = true,
      debounce_text_changes = 500
    },
    get_language_id = <function 4>,
    handlers = <1>{},
    init_options = vim.empty_dict(),
    log_level = 2,
    message_level = 1,
    name = "gopls",
    on_attach = <function 5>,
    on_exit = <function 6>,
    on_init = <function 7>,
    root_dir = "/Users/muhammad.abduh/repo/odpf/siren",
    settings = {
      gopls = {
        analyses = {
          ST1003 = true,
          fieldalignment = false,
          fillreturns = true,
          nilness = true,
          nonewvars = true,
          shadow = true,
          undeclaredname = true,
          unreachable = true,
          unusedparams = true,
          unusedwrite = true,
          useany = true
        },
        buildFlags = {},
        codelenses = {
          gc_details = true,
          generate = true,
          regenerate_cgo = true,
          test = true,
          tidy = true,
          upgrade_dependency = true,
          vendor = true
        },
        completeUnimported = true,
        diagnosticsDelay = "500ms",
        gofumpt = false,
        hints = {
          assignVariableTypes = true,
          compositeLiteralFields = true,
          compositeLiteralTypes = true,
          constantValues = true,
          functionTypeParameters = true,
          parameterNames = true,
          rangeVariableTypes = true
        },
        ["local"] = "github.com/odpf/siren",
        matcher = "Fuzzy",
        staticcheck = true,
        symbolMatcher = "fuzzy",
        usePlaceholders = true
      }
    },
    single_file_support = true,
    workspace_folders = <2>{ {
        name = "/Users/muhammad.abduh/repo/odpf/siren",
        uri = "file:///Users/muhammad.abduh/repo/odpf/siren"
      } },
    <metatable> = <3>{
      __tostring = <function 8>
    }
  },
  handlers = <table 1>,
  id = 1,
  initialized = true,
  is_stopped = <function 9>,
  messages = {
    messages = {},
    name = "gopls",
    progress = {
      ["3032113757904489387"] = {
        cancellable = true,
        done = true,
        message = "failed",
        title = "Running go generate ./..."
      },
      ["5577006791947779410"] = {
        done = true,
        message = "Finished loading packages.",
        title = "Setting up workspace"
      }
    },
    status = {}
  },
  name = "gopls",
  notify = <function 10>,
  offset_encoding = "utf-16",
  request = <function 11>,
  request_sync = <function 12>,
  requests = {
    [1405] = {
      bufnr = 51,
      method = "textDocument/documentHighlight",
      type = "pending"
    }
  },
  rpc = {
    is_closing = <function 13>,
    notify = <function 14>,
    request = <function 15>,
    terminate = <function 16>
  },
  server_capabilities = {
    callHierarchyProvider = true,
    codeActionProvider = {
      codeActionKinds = { "quickfix", "refactor.extract", "refactor.rewrite", "source.fixAll", "source.organizeImports" }
    },
    codeLensProvider = vim.empty_dict(),
    completionProvider = {
      triggerCharacters = { "." }
    },
    definitionProvider = true,
    documentFormattingProvider = true,
    documentHighlightProvider = true,
    documentLinkProvider = vim.empty_dict(),
    documentSymbolProvider = true,
    executeCommandProvider = {
      commands = { "gopls.add_dependency", "gopls.add_import", "gopls.apply_fix", "gopls.check_upgrades", "gopls.edit_go_directive", "gopls.gc_details", "gopls.generate", "gopls.generate_gopls_mod", "gopls.go_get_package", "gopls.list_imports", "gopls.list_known_packages", "gopls.regenerate_cgo", "gopls.remove_dependency", "gopls.reset_go_mod_diagnostics", "gopls.run_tests", "gopls.run_vulncheck_exp", "gopls.start_debugging", "gopls.test", "gopls.tidy", "gopls.toggle_gc_details", "gopls.update_go_sum", "gopls.upgrade_dependency", "gopls.vendor" }
    },
    foldingRangeProvider = true,
    hoverProvider = true,
    implementationProvider = true,
    inlayHintProvider = vim.empty_dict(),
    referencesProvider = true,
    renameProvider = {
      prepareProvider = true
    },
    signatureHelpProvider = {
      triggerCharacters = { "(", "," }
    },
    textDocumentSync = {
      change = 2,
      openClose = true,
      save = vim.empty_dict()
    },
    typeDefinitionProvider = true,
    workspace = {
      fileOperations = vim.empty_dict(),
      workspaceFolders = {
        changeNotifications = "workspace/didChangeWorkspaceFolders",
        supported = true
      }
    },
    workspaceSymbolProvider = true
  },
  stop = <function 17>,
  supports_method = <function 18>,
  workspaceFolders = <table 2>,
  workspace_did_change_configuration = <function 19>,
  workspace_folders = <table 2>,
  <metatable> = {
    __index = <function 20>
  }
}
 |2: 51
  ...e/lunarvim/site/pack/packer/start/go.nvim/lua/go/lsp.lua:24 |1: {
  _on_attach = <function 1>,
  attached_buffers = {
    [20] = true,
    [23] = true,
    [34] = true,
    [51] = true
  },
  cancel_request = <function 2>,
  commands = {},
  config = {
    _on_attach = <function 3>,
    autostart = true,
    capabilities = {
      callHierarchy = {
        dynamicRegistration = false
      },
      textDocument = {
        codeAction = {
          codeActionLiteralSupport = {
            codeActionKind = {
              valueSet = { "", "Empty", "QuickFix", "Refactor", "RefactorExtract", "RefactorInline", "RefactorRewrite", "Source", "SourceOrganizeImports", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
            }
          },
          dataSupport = true,
          dynamicRegistration = false,
          isPreferredSupport = true,
          resolveSupport = {
            properties = { "edit" }
          }
        },
        completion = {
          completionItem = {
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { "markdown", "plaintext" },
            insertReplaceSupport = true,
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = {
              properties = { "documentation", "details", "additionalTextEdits" }
            },
            snippetSupport = true
          },
          completionItemKind = {
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
          },
          contextSupport = true,
          dynamicRegistration = true
        },
        declaration = {
          linkSupport = true
        },
        definition = {
          linkSupport = true
        },
        documentHighlight = {
          dynamicRegistration = false
        },
        documentSymbol = {
          dynamicRegistration = false,
          hierarchicalDocumentSymbolSupport = true,
          symbolKind = {
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
          }
        },
        hover = {
          contentFormat = { "markdown", "plaintext" },
          dynamicRegistration = false
        },
        implementation = {
          linkSupport = true
        },
        publishDiagnostics = {
          relatedInformation = true,
          tagSupport = {
            valueSet = { 1, 2 }
          }
        },
        references = {
          dynamicRegistration = false
        },
        rename = {
          dynamicRegistration = false,
          prepareSupport = true
        },
        signatureHelp = {
          dynamicRegistration = false,
          signatureInformation = {
            activeParameterSupport = true,
            documentationFormat = { "markdown", "plaintext" },
            parameterInformation = {
              labelOffsetSupport = true
            }
          }
        },
        synchronization = {
          didSave = true,
          dynamicRegistration = false,
          willSave = false,
          willSaveWaitUntil = false
        },
        typeDefinition = {
          linkSupport = true
        }
      },
      window = {
        showDocument = {
          support = false
        },
        showMessage = {
          messageActionItem = {
            additionalPropertiesSupport = false
          }
        },
        workDoneProgress = true
      },
      workspace = {
        applyEdit = true,
        configuration = true,
        symbol = {
          dynamicRegistration = false,
          hierarchicalWorkspaceSymbolSupport = true,
          symbolKind = {
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
          }
        },
        workspaceEdit = {
          resourceOperations = { "rename", "create", "delete" }
        },
        workspaceFolders = true
      }
    },
    cmd = { "gopls", "-remote=auto" },
    cmd_cwd = "/Users/muhammad.abduh/repo/odpf/siren",
    filetypes = { "go", "gomod", "gosum", "gotmpl", "gohtmltmpl", "gotexttmpl" },
    flags = {
      allow_incremental_sync = true,
      debounce_text_changes = 500
    },
    get_language_id = <function 4>,
    handlers = <1>{},
    init_options = vim.empty_dict(),
    log_level = 2,
    message_level = 1,
    name = "gopls",
    on_attach = <function 5>,
    on_exit = <function 6>,
    on_init = <function 7>,
    root_dir = "/Users/muhammad.abduh/repo/odpf/siren",
    settings = {
      gopls = {
        analyses = {
          ST1003 = true,
          fieldalignment = false,
          fillreturns = true,
          nilness = true,
          nonewvars = true,
          shadow = true,
          undeclaredname = true,
          unreachable = true,
          unusedparams = true,
          unusedwrite = true,
          useany = true
        },
        buildFlags = {},
        codelenses = {
          gc_details = true,
          generate = true,
          regenerate_cgo = true,
          test = true,
          tidy = true,
          upgrade_dependency = true,
          vendor = true
        },
        completeUnimported = true,
        diagnosticsDelay = "500ms",
        gofumpt = false,
        hints = {
          assignVariableTypes = true,
          compositeLiteralFields = true,
          compositeLiteralTypes = true,
          constantValues = true,
          functionTypeParameters = true,
          parameterNames = true,
          rangeVariableTypes = true
        },
        ["local"] = "github.com/odpf/siren",
        matcher = "Fuzzy",
        staticcheck = true,
        symbolMatcher = "fuzzy",
        usePlaceholders = true
      }
    },
    single_file_support = true,
    workspace_folders = <2>{ {
        name = "/Users/muhammad.abduh/repo/odpf/siren",
        uri = "file:///Users/muhammad.abduh/repo/odpf/siren"
      } },
    <metatable> = <3>{
      __tostring = <function 8>
    }
  },
  handlers = <table 1>,
  id = 1,
  initialized = true,
  is_stopped = <function 9>,
  messages = {
    messages = {},
    name = "gopls",
    progress = {
      ["3032113757904489387"] = {
        cancellable = true,
        done = true,
        message = "failed",
        title = "Running go generate ./..."
      },
      ["5577006791947779410"] = {
        done = true,
        message = "Finished loading packages.",
        title = "Setting up workspace"
      }
    },
    status = {}
  },
  name = "gopls",
  notify = <function 10>,
  offset_encoding = "utf-16",
  request = <function 11>,
  request_sync = <function 12>,
  requests = {
    [1472] = {
      bufnr = 23,
      method = "textDocument/documentHighlight",
      type = "pending"
    }
  },
  rpc = {
    is_closing = <function 13>,
    notify = <function 14>,
    request = <function 15>,
    terminate = <function 16>
  },
  server_capabilities = {
    callHierarchyProvider = true,
    codeActionProvider = {
      codeActionKinds = { "quickfix", "refactor.extract", "refactor.rewrite", "source.fixAll", "source.organizeImports" }
    },
    codeLensProvider = vim.empty_dict(),
    completionProvider = {
      triggerCharacters = { "." }
    },
    definitionProvider = true,
    documentFormattingProvider = true,
    documentHighlightProvider = true,
    documentLinkProvider = vim.empty_dict(),
    documentSymbolProvider = true,
    executeCommandProvider = {
      commands = { "gopls.add_dependency", "gopls.add_import", "gopls.apply_fix", "gopls.check_upgrades", "gopls.edit_go_directive", "gopls.gc_details", "gopls.generate", "gopls.generate_gopls_mod", "gopls.go_get_package", "gopls.list_imports", "gopls.list_known_packages", "gopls.regenerate_cgo", "gopls.remove_dependency", "gopls.reset_go_mod_diagnostics", "gopls.run_tests", "gopls.run_vulncheck_exp", "gopls.start_debugging", "gopls.test", "gopls.tidy", "gopls.toggle_gc_details", "gopls.update_go_sum", "gopls.upgrade_dependency", "gopls.vendor" }
    },
    foldingRangeProvider = true,
    hoverProvider = true,
    implementationProvider = true,
    inlayHintProvider = vim.empty_dict(),
    referencesProvider = true,
    renameProvider = {
      prepareProvider = true
    },
    signatureHelpProvider = {
      triggerCharacters = { "(", "," }
    },
    textDocumentSync = {
      change = 2,
      openClose = true,
      save = vim.empty_dict()
    },
    typeDefinitionProvider = true,
    workspace = {
      fileOperations = vim.empty_dict(),
      workspaceFolders = {
        changeNotifications = "workspace/didChangeWorkspaceFolders",
        supported = true
      }
    },
    workspaceSymbolProvider = true
  },
  stop = <function 17>,
  supports_method = <function 18>,
  workspaceFolders = <table 2>,
  workspace_did_change_configuration = <function 19>,
  workspace_folders = <table 2>,
  <metatable> = {
    __index = <function 20>
  }
}
 |2: 23
  ...e/lunarvim/site/pack/packer/start/go.nvim/lua/go/lsp.lua:24 |1: {
  _on_attach = <function 1>,
  attached_buffers = {
    [20] = true,
    [23] = true,
    [34] = true,
    [51] = true,
    [68] = true
  },
  cancel_request = <function 2>,
  commands = {},
  config = {
    _on_attach = <function 3>,
    autostart = true,
    capabilities = {
      callHierarchy = {
        dynamicRegistration = false
      },
      textDocument = {
        codeAction = {
          codeActionLiteralSupport = {
            codeActionKind = {
              valueSet = { "", "Empty", "QuickFix", "Refactor", "RefactorExtract", "RefactorInline", "RefactorRewrite", "Source", "SourceOrganizeImports", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
            }
          },
          dataSupport = true,
          dynamicRegistration = false,
          isPreferredSupport = true,
          resolveSupport = {
            properties = { "edit" }
          }
        },
        completion = {
          completionItem = {
            commitCharactersSupport = true,
            deprecatedSupport = true,
            documentationFormat = { "markdown", "plaintext" },
            insertReplaceSupport = true,
            labelDetailsSupport = true,
            preselectSupport = true,
            resolveSupport = {
              properties = { "documentation", "details", "additionalTextEdits" }
            },
            snippetSupport = true
          },
          completionItemKind = {
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
          },
          contextSupport = true,
          dynamicRegistration = true
        },
        declaration = {
          linkSupport = true
        },
        definition = {
          linkSupport = true
        },
        documentHighlight = {
          dynamicRegistration = false
        },
        documentSymbol = {
          dynamicRegistration = false,
          hierarchicalDocumentSymbolSupport = true,
          symbolKind = {
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
          }
        },
        hover = {
          contentFormat = { "markdown", "plaintext" },
          dynamicRegistration = false
        },
        implementation = {
          linkSupport = true
        },
        publishDiagnostics = {
          relatedInformation = true,
          tagSupport = {
            valueSet = { 1, 2 }
          }
        },
        references = {
          dynamicRegistration = false
        },
        rename = {
          dynamicRegistration = false,
          prepareSupport = true
        },
        signatureHelp = {
          dynamicRegistration = false,
          signatureInformation = {
            activeParameterSupport = true,
            documentationFormat = { "markdown", "plaintext" },
            parameterInformation = {
              labelOffsetSupport = true
            }
          }
        },
        synchronization = {
          didSave = true,
          dynamicRegistration = false,
          willSave = false,
          willSaveWaitUntil = false
        },
        typeDefinition = {
          linkSupport = true
        }
      },
      window = {
        showDocument = {
          support = false
        },
        showMessage = {
          messageActionItem = {
            additionalPropertiesSupport = false
          }
        },
        workDoneProgress = true
      },
      workspace = {
        applyEdit = true,
        configuration = true,
        symbol = {
          dynamicRegistration = false,
          hierarchicalWorkspaceSymbolSupport = true,
          symbolKind = {
            valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
          }
        },
        workspaceEdit = {
          resourceOperations = { "rename", "create", "delete" }
        },
        workspaceFolders = true
      }
    },
    cmd = { "gopls", "-remote=auto" },
    cmd_cwd = "/Users/muhammad.abduh/repo/odpf/siren",
    filetypes = { "go", "gomod", "gosum", "gotmpl", "gohtmltmpl", "gotexttmpl" },
    flags = {
      allow_incremental_sync = true,
      debounce_text_changes = 500
    },
    get_language_id = <function 4>,
    handlers = <1>{},
    init_options = vim.empty_dict(),
    log_level = 2,
    message_level = 1,
    name = "gopls",
    on_attach = <function 5>,
    on_exit = <function 6>,
    on_init = <function 7>,
    root_dir = "/Users/muhammad.abduh/repo/odpf/siren",
    settings = {
      gopls = {
        analyses = {
          ST1003 = true,
          fieldalignment = false,
          fillreturns = true,
          nilness = true,
          nonewvars = true,
          shadow = true,
          undeclaredname = true,
          unreachable = true,
          unusedparams = true,
          unusedwrite = true,
          useany = true
        },
        buildFlags = {},
        codelenses = {
          gc_details = true,
          generate = true,
          regenerate_cgo = true,
          test = true,
          tidy = true,
          upgrade_dependency = true,
          vendor = true
        },
        completeUnimported = true,
        diagnosticsDelay = "500ms",
        gofumpt = false,
        hints = {
          assignVariableTypes = true,
          compositeLiteralFields = true,
          compositeLiteralTypes = true,
          constantValues = true,
          functionTypeParameters = true,
          parameterNames = true,
          rangeVariableTypes = true
        },
        ["local"] = "github.com/odpf/siren",
        matcher = "Fuzzy",
        staticcheck = true,
        symbolMatcher = "fuzzy",
        usePlaceholders = true
      }
    },
    single_file_support = true,
    workspace_folders = <2>{ {
        name = "/Users/muhammad.abduh/repo/odpf/siren",
        uri = "file:///Users/muhammad.abduh/repo/odpf/siren"
      } },
    <metatable> = <3>{
      __tostring = <function 8>
    }
  },
  handlers = <table 1>,
  id = 1,
  initialized = true,
  is_stopped = <function 9>,
  messages = {
    messages = {},
    name = "gopls",
    progress = {
      ["3032113757904489387"] = {
        cancellable = true,
        done = true,
        message = "failed",
        title = "Running go generate ./..."
      },
      ["5577006791947779410"] = {
        done = true,
        message = "Finished loading packages.",
        title = "Setting up workspace"
      }
    },
    status = {}
  },
  name = "gopls",
  notify = <function 10>,
  offset_encoding = "utf-16",
  request = <function 11>,
  request_sync = <function 12>,
  requests = {
    [2308] = {
      bufnr = 68,
      method = "textDocument/documentHighlight",
      type = "pending"
    }
  },
  rpc = {
    is_closing = <function 13>,
    notify = <function 14>,
    request = <function 15>,
    terminate = <function 16>
  },
  server_capabilities = {
    callHierarchyProvider = true,
    codeActionProvider = {
      codeActionKinds = { "quickfix", "refactor.extract", "refactor.rewrite", "source.fixAll", "source.organizeImports" }
    },
    codeLensProvider = vim.empty_dict(),
    completionProvider = {
      triggerCharacters = { "." }
    },
    definitionProvider = true,
    documentFormattingProvider = true,
    documentHighlightProvider = true,
    documentLinkProvider = vim.empty_dict(),
    documentSymbolProvider = true,
    executeCommandProvider = {
      commands = { "gopls.add_dependency", "gopls.add_import", "gopls.apply_fix", "gopls.check_upgrades", "gopls.edit_go_directive", "gopls.gc_details", "gopls.generate", "gopls.generate_gopls_mod", "gopls.go_get_package", "gopls.list_imports", "gopls.list_known_packages", "gopls.regenerate_cgo", "gopls.remove_dependency", "gopls.reset_go_mod_diagnostics", "gopls.run_tests", "gopls.run_vulncheck_exp", "gopls.start_debugging", "gopls.test", "gopls.tidy", "gopls.toggle_gc_details", "gopls.update_go_sum", "gopls.upgrade_dependency", "gopls.vendor" }
    },
    foldingRangeProvider = true,
    hoverProvider = true,
    implementationProvider = true,
    inlayHintProvider = vim.empty_dict(),
    referencesProvider = true,
    renameProvider = {
      prepareProvider = true
    },
    signatureHelpProvider = {
      triggerCharacters = { "(", "," }
    },
    textDocumentSync = {
      change = 2,
      openClose = true,
      save = vim.empty_dict()
    },
    typeDefinitionProvider = true,
    workspace = {
      fileOperations = vim.empty_dict(),
      workspaceFolders = {
        changeNotifications = "workspace/didChangeWorkspaceFolders",
        supported = true
      }
    },
    workspaceSymbolProvider = true
  },
  stop = <function 17>,
  supports_method = <function 18>,
  workspaceFolders = <table 2>,
  workspace_did_change_configuration = <function 19>,
  workspace_folders = <table 2>,
  <metatable> = {
    __index = <function 20>
  }
}
 |2: 68
